/* -*- mode: C++; eval: (font-lock-mode 0); -*- */
/*
   Copyright (c) 2019-2020, Triad National Security, LLC. All rights reserved.

   This is open source software; you can redistribute it and/or modify it
   under the terms of the BSD-3 License. If software is modified to produce
   derivative works, such modified software should be clearly marked, so as
   not to confuse it with the version available from LANL. Full text of the
   BSD-3 License can be found in the LICENSE file of the repository.
*/

/*!
  \file include/flpr/Syntax_Tags_Defs.hh
  Definition of FLPR::Syntax_Tags::Tags, used to identify nodes in a
  parse tree.
*/

#ifndef FLPR_SYNTAX_TAGS_DEFS_HH
#define FLPR_SYNTAX_TAGS_DEFS_HH 1

/*! This uses a trick called an X-Macro (a high-order macro) to make the
  members of the enum printable. */
#define LISTIZE(NAME, STR, TYPE) NAME,
#define STRINGIZE(NAME, STR, TYPE) STR,
#define TYPIZE(NAME, STR, TYPE) TYPE,

// clang-format off
//! Define the members of the enum class here.
/*!
  An entry is of the form "X(<NAME>, <STR>, <TYPE>)"
    NAME is the enumeration name, with prescibed prefixes
       KW_ - keyword
       PG_ - program grammar production
       SG_ - statement grammar production
       TK_ - token
    STR  is a printable string
    TYPE is the kind of syntax entity:
       0 - Unknown
       1 - Non-terminal (PG_/SG_)
       2 - Truncated non-terminal (SG_): the token_range is unparsed
       3 - Terminal (TK_)
       4 - Keyword (KW_), convertable to a TK_NAME 
       5 - Top-level parsable statements (e.g. not statement subexpressions)

  The type-0 tokens are used for a variety of signalling:
    EOL              - end-of-line, reserving the 0 value generated by flex
    UNKNOWN          - a token unrecognized by the flex parser
    BAD              - "not-a-token"
    HOIST            - the children should be hoisted to the root level
    CLIENT_EXTENSION - client programs can start number tokens here 

  The EOL enum must be first, and the CLIENT_EXTENSION must be last
*/
#define MAP(X)                                                          \
  X(EOL, "<EOL>", 0)                                                    \
  X(UNKNOWN, "<UNKNOWN>", 0)                                            \
  X(BAD, "<BAD>", 0)                                                    \
  X(HOIST, "<HOIST>", 0)                                                \
  X(KW_000_LB, "<keyword grammar enum lower bound>", 0)                 \
  X(KW_ABSTRACT, "ABSTRACT", 4)                                         \
  X(KW_ACQUIRED_LOCK, "ACQUIRED_LOCK", 4)                               \
  X(KW_ALL, "ALL", 4)                                                   \
  X(KW_ALLOCATABLE, "ALLOCATABLE", 4)                                   \
  X(KW_ALLOCATE, "ALLOCATE", 4)                                         \
  X(KW_ASSIGNMENT, "ASSIGNMENT", 4)                                     \
  X(KW_ASSOCIATE, "ASSOCIATE", 4)                                       \
  X(KW_ASYNCHRONOUS, "ASYNCHRONOUS", 4)                                 \
  X(KW_BACKSPACE, "BACKSPACE", 4)                                       \
  X(KW_BIND, "BIND", 4)                                                 \
  X(KW_BLOCK, "BLOCK", 4)                                               \
  X(KW_CALL, "CALL", 4)                                                 \
  X(KW_CASE, "CASE", 4)                                                 \
  X(KW_CHARACTER, "CHARACTER", 4)                                       \
  X(KW_CLASS, "CLASS", 4)                                               \
  X(KW_CLOSE, "CLOSE", 4)                                               \
  X(KW_CODIMENSION, "CODIMENSION", 4)                                   \
  X(KW_COMMON, "COMMON", 4)                                             \
  X(KW_COMPLEX, "COMPLEX", 4)                                           \
  X(KW_CONCURRENT, "CONCURRENT", 4)                                     \
  X(KW_CONTAINS, "CONTAINS", 4)                                         \
  X(KW_CONTIGUOUS, "CONTIGUOUS", 4)                                     \
  X(KW_CONTINUE, "CONTINUE", 4)                                         \
  X(KW_CRITICAL, "CRITICAL", 4)                                         \
  X(KW_CYCLE, "CYCLE", 4)                                               \
  X(KW_DATA, "DATA", 4)                                                 \
  X(KW_DEALLOCATE, "DEALLOCATE", 4)                                     \
  X(KW_DEFAULT, "DEFAULT", 4)                                           \
  X(KW_DEFERRED, "DEFERRED", 4)                                         \
  X(KW_DIMENSION, "DIMENSION", 4)                                       \
  X(KW_DO, "DO", 4)                                                     \
  X(KW_DOUBLE, "DOUBLE", 4)                                             \
  X(KW_DOUBLEPRECISION, "DOUBLEPRECISION", 4)                           \
  X(KW_DOWHILE, "DOWHILE", 4)                                           \
  X(KW_ELEMENTAL, "ELEMENTAL", 4)                                       \
  X(KW_ELSE, "ELSE", 4)                                                 \
  X(KW_END, "END", 4)                                                   \
  X(KW_ENTRY, "ENTRY", 4)                                               \
  X(KW_ENUM, "ENUM", 4)                                                 \
  X(KW_ENUMERATOR, "ENUMERATOR", 4)                                     \
  X(KW_EOR, "EOR", 4)                                                   \
  X(KW_EQUIVALENCE, "EQUIVALENCE", 4)                                   \
  X(KW_ERR, "ERR", 4)                                                   \
  X(KW_ERRMSG, "ERRMSG", 4)                                             \
  X(KW_ERROR, "ERROR", 4)                                               \
  X(KW_EVENT, "EVENT", 4)                                               \
  X(KW_EXIT, "EXIT", 4)                                                 \
  X(KW_EXTENDS, "EXTENDS", 4)                                           \
  X(KW_EXTERNAL, "EXTERNAL", 4)                                         \
  X(KW_FAIL, "FAIL", 4)                                                 \
  X(KW_FILE, "FILE", 4)                                                 \
  X(KW_FINAL, "FINAL", 4)                                               \
  X(KW_FLUSH, "FLUSH", 4)                                               \
  X(KW_FORALL, "FORALL", 4)                                             \
  X(KW_FORM, "FORM", 4)                                                 \
  X(KW_FORMAT, "FORMAT", 4)                                             \
  X(KW_FORMATTED, "FORMATTED", 4)                                       \
  X(KW_FUNCTION, "FUNCTION", 4)                                         \
  X(KW_GENERIC, "GENERIC", 4)                                           \
  X(KW_GO, "GO", 4)                                                     \
  X(KW_ID, "ID", 4)                                                     \
  X(KW_IF, "IF", 4)                                                     \
  X(KW_IMAGE, "IMAGE", 4)                                               \
  X(KW_IMAGES, "IMAGES", 4)                                             \
  X(KW_IMPLICIT, "IMPLICIT", 4)                                         \
  X(KW_IMPORT, "IMPORT", 4)                                             \
  X(KW_IMPURE, "IMPURE", 4)                                             \
  X(KW_IN, "IN", 4)                                                     \
  X(KW_INCLUDE, "INCLUDE", 4)                                           \
  X(KW_INOUT, "INOUT", 4)                                               \
  X(KW_INQUIRE, "INQUIRE", 4)                                           \
  X(KW_INTEGER, "INTEGER", 4)                                           \
  X(KW_INTENT, "INTENT", 4)                                             \
  X(KW_INTERFACE, "INTERFACE", 4)                                       \
  X(KW_INTRINSIC, "INTRINSIC", 4)                                       \
  X(KW_IOMSG, "IOMSG", 4)                                               \
  X(KW_IOSTAT, "IOSTAT", 4)                                             \
  X(KW_IS, "IS", 4)                                                     \
  X(KW_KIND, "KIND", 4)                                                 \
  X(KW_LEN, "LEN", 4)                                                   \
  X(KW_LOCAL, "LOCAL", 4)                                               \
  X(KW_LOCAL_INIT, "LOCAL_INIT", 4)                                     \
  X(KW_LOCK, "LOCK", 4)                                                 \
  X(KW_LOGICAL, "LOGICAL", 4)                                           \
  X(KW_MEMORY, "MEMORY", 4)                                             \
  X(KW_MODULE, "MODULE", 4)                                             \
  X(KW_MOLD, "MOLD", 4)                                                 \
  X(KW_NAME, "NAME", 4)                                                 \
  X(KW_NAMELIST, "NAMELIST", 4)                                         \
  X(KW_NEW_INDEX, "NEW_INDEX", 4)                                       \
  X(KW_NONE, "NONE", 4)                                                 \
  X(KW_NON_INTRINSIC, "NON_INTRINSIC", 4)                               \
  X(KW_NON_OVERRIDABLE, "NON_OVERRIDABLE", 4)                           \
  X(KW_NON_RECURSIVE, "NON_RECURSIVE", 4)                               \
  X(KW_NOPASS, "NOPASS", 4)                                             \
  X(KW_NULLIFY, "NULLIFY", 4)                                           \
  X(KW_ONLY, "ONLY", 4)                                                 \
  X(KW_OPEN, "OPEN", 4)                                                 \
  X(KW_OPERATOR, "OPERATOR", 4)                                         \
  X(KW_OPTIONAL, "OPTIONAL", 4)                                         \
  X(KW_OUT, "OUT", 4)                                                   \
  X(KW_PARAMETER, "PARAMETER", 4)                                       \
  X(KW_PASS, "PASS", 4)                                                 \
  X(KW_POINTER, "POINTER", 4)                                           \
  X(KW_POST, "POST", 4)                                                 \
  X(KW_PRECISION, "PRECISION", 4)                                       \
  X(KW_PRINT, "PRINT", 4)                                               \
  X(KW_PRIVATE, "PRIVATE", 4)                                           \
  X(KW_PROCEDURE, "PROCEDURE", 4)                                       \
  X(KW_PROGRAM, "PROGRAM", 4)                                           \
  X(KW_PROTECTED, "PROTECTED", 4)                                       \
  X(KW_PUBLIC, "PUBLIC", 4)                                             \
  X(KW_PURE, "PURE", 4)                                                 \
  X(KW_QUIET, "QUIET", 4)                                               \
  X(KW_RANK, "RANK", 4)                                                 \
  X(KW_READ, "READ", 4)                                                 \
  X(KW_REAL, "REAL", 4)                                                 \
  X(KW_RECURSIVE, "RECURSIVE", 4)                                       \
  X(KW_RESULT, "RESULT", 4)                                             \
  X(KW_RETURN, "RETURN", 4)                                             \
  X(KW_REWIND, "REWIND", 4)                                             \
  X(KW_SAVE, "SAVE", 4)                                                 \
  X(KW_SELECT, "SELECT", 4)                                             \
  X(KW_SEQUENCE, "SEQUENCE", 4)                                         \
  X(KW_SHARED, "SHARED", 4)                                             \
  X(KW_SOURCE, "SOURCE", 4)                                             \
  X(KW_STAT, "STAT", 4)                                                 \
  X(KW_STOP, "STOP", 4)                                                 \
  X(KW_SUBMODULE, "SUBMODULE", 4)                                       \
  X(KW_SUBROUTINE, "SUBROUTINE", 4)                                     \
  X(KW_SYNC, "SYNC", 4)                                                 \
  X(KW_TARGET, "TARGET", 4)                                             \
  X(KW_TEAM, "TEAM", 4)                                                 \
  X(KW_TEAM_NUMBER, "TEAM_NUMBER", 4)                                   \
  X(KW_THEN, "THEN", 4)                                                 \
  X(KW_TO, "TO", 4)                                                     \
  X(KW_TYPE, "TYPE", 4)                                                 \
  X(KW_UNFORMATTED, "UNFORMATTED", 4)                                   \
  X(KW_UNIT, "UNIT", 4)                                                 \
  X(KW_UNLOCK, "UNLOCK", 4)                                             \
  X(KW_UNTIL_COUNT, "UNTIL_COUNT", 4)                                   \
  X(KW_USE, "USE", 4)                                                   \
  X(KW_VALUE, "VALUE", 4)                                               \
  X(KW_VOLATILE, "VOLATILE", 4)                                         \
  X(KW_WAIT, "WAIT", 4)                                                 \
  X(KW_WHERE, "WHERE", 4)                                               \
  X(KW_WHILE, "WHILE", 4)                                               \
  X(KW_WRITE, "WRITE", 4)                                               \
  X(KW_ZZZ_UB, "<keyword grammar enum upper bound>", 0)                 \
  X(PG_000_LB, "<prgm grammar enum lower bound>", 0)                    \
  X(PG_ACTION_TERM_DO_CONSTRUCT, "action-term-do-construct", 1)         \
  X(PG_ASSOCIATE_CONSTRUCT, "associate-construct", 1)                   \
  X(PG_BLOCK, "block", 1)                                               \
  X(PG_BLOCK_CONSTRUCT, "block-construct", 1)                           \
  X(PG_BLOCK_SPECIFICATION_PART, "block-specification-part", 1)         \
  X(PG_CASE_CONSTRUCT, "case-construct", 1)                             \
  X(PG_COMPONENT_PART, "component-part", 1)                             \
  X(PG_DECLARATION_CONSTRUCT, "declaration-construct", 1)               \
  X(PG_DERIVED_TYPE_DEF, "derived-type-def", 1)                         \
  X(PG_DO_BLOCK, "do-block", 1)                                         \
  X(PG_DO_BODY, "do-body", 1)                                           \
  X(PG_DO_CONSTRUCT, "do-construct", 1)                                 \
  X(PG_DO_TERM_ACTION_STMT, "do-term-action-stmt", 1)                   \
  X(PG_DO_TERM_SHARED_STMT, "do-term-shared-stmt", 1)                   \
  X(PG_ENUM_DEF, "enum-def", 1)                                         \
  X(PG_EXECUTABLE_CONSTRUCT, "executable-construct", 1)                 \
  X(PG_EXECUTION_PART, "execution-part", 1)                             \
  X(PG_EXECUTION_PART_CONSTRUCT, "execution-part-construct", 1)         \
  X(PG_EXTERNAL_SUBPROGRAM, "external-subprogram", 1)                   \
  X(PG_FORALL_BODY_CONSTRUCT, "forall-body-construct", 1)               \
  X(PG_FORALL_CONSTRUCT, "forall-construct", 1)                         \
  X(PG_FUNCTION_SUBPROGRAM, "function-subprogram", 1)                   \
  X(PG_IF_CONSTRUCT, "if-construct", 1)                                 \
  X(PG_IMPLICIT_PART, "implicit-part", 1)                               \
  X(PG_IMPLICIT_PART_STMT, "implicit-part-stmt", 1)                     \
  X(PG_INNER_SHARED_DO_CONSTRUCT, "inner-shared-do-construct", 1)       \
  X(PG_INTERFACE_BLOCK, "interface-block", 1)                           \
  X(PG_INTERFACE_BODY, "interface-body", 1)                             \
  X(PG_INTERFACE_SPECIFICATION, "interface-specification", 1)           \
  X(PG_INTERNAL_SUBPROGRAM, "internal-subprogram", 1)                   \
  X(PG_INTERNAL_SUBPROGRAM_PART, "internal-subprogram-part", 1)         \
  X(PG_MAIN_PROGRAM, "main-program", 1)                                 \
  X(PG_MODULE, "module", 1)                                             \
  X(PG_MODULE_SUBPROGRAM, "module-subprogram", 1)                       \
  X(PG_MODULE_SUBPROGRAM_PART, "module-subprogram-part", 1)             \
  X(PG_NONBLOCK_DO_CONSTRUCT, "nonblock-do-construct", 1)               \
  X(PG_OUTER_SHARED_DO_CONSTRUCT, "outer-shared-do-construct", 1)       \
  X(PG_PROGRAM, "program", 1)                                           \
  X(PG_PROGRAM_UNIT, "program-unit", 1)                                 \
  X(PG_SELECT_RANK_CONSTRUCT, "select-rank-construct", 1)               \
  X(PG_SELECT_TYPE_CONSTRUCT, "select-type-construct", 1)               \
  X(PG_SEPARATE_MODULE_SUBPROGRAM, "separate-module-subprogram", 1)     \
  X(PG_SPECIFICATION_CONSTRUCT, "specification-construct", 1)           \
  X(PG_SPECIFICATION_PART, "specification-part", 1)                     \
  X(PG_SUBMODULE, "submodule", 1)                                       \
  X(PG_SUBROUTINE_SUBPROGRAM, "subroutine-subprogram", 1)               \
  X(PG_TYPE_BOUND_PROCEDURE_PART, "type-bound-procedure-part", 1)       \
  X(PG_WHERE_BODY_CONSTRUCT, "where-body-construct", 1)                 \
  X(PG_WHERE_CONSTRUCT, "where-construct", 1)                           \
  X(PG_ZZZ_UB, "<prgm grammar enum upper bound>", 0)                    \
  X(SG_000_LB, "<statment grammar enum lower bound>", 0)                \
  X(SG_ACCESS_ID, "access-id", 1)                                       \
  X(SG_ACCESS_ID_LIST, "access-id-list", 1)                             \
  X(SG_ACCESS_SPEC, "access-spec", 1)                                   \
  X(SG_ACCESS_STMT, "access-stmt", 5)                                   \
  X(SG_ACTION_STMT, "action-stmt", 5)                                   \
  X(SG_ACTUAL_ARG, "actual-arg", 1)                                     \
  X(SG_ACTUAL_ARG_SPEC, "actual-arg-spec", 1)                           \
  X(SG_ACTUAL_ARG_SPEC_LIST, "actual-arg-spec-list", 1)                 \
  X(SG_ADD_OP, "add-op", 1)                                             \
  X(SG_ALLOCATABLE_DECL, "allocatable-decl", 1)                         \
  X(SG_ALLOCATABLE_DECL_LIST, "allocatable-decl-list", 1)               \
  X(SG_ALLOCATABLE_STMT, "allocatable-stmt", 5)                         \
  X(SG_ALLOCATE_COARRAY_SPEC, "allocate-coarray-spec", 1)               \
  X(SG_ALLOCATE_COSHAPE_SPEC, "allocate-coshape-spec", 1)               \
  X(SG_ALLOCATE_COSHAPE_SPEC_LIST, "allocate-coshape-spec-list", 1)     \
  X(SG_ALLOCATE_OBJECT, "allocate-object", 1)                           \
  X(SG_ALLOCATE_OBJECT_LIST, "allocate-object-list", 1)                 \
  X(SG_ALLOCATE_SHAPE_SPEC, "allocate-shape-spec", 1)                   \
  X(SG_ALLOCATE_SHAPE_SPEC_LIST, "allocate-shape-spec-list", 1)         \
  X(SG_ALLOCATE_STMT, "allocate-stmt", 5)                               \
  X(SG_ALLOCATION, "allocation", 1)                                     \
  X(SG_ALLOCATION_LIST, "allocation-list", 1)                           \
  X(SG_ALLOC_OPT, "alloc-opt", 1)                                       \
  X(SG_ALLOC_OPT_LIST, "alloc-opt-list", 1)                             \
  X(SG_ARITHMETIC_IF_STMT, "arithmetic-if-stmt", 5)                     \
  X(SG_ARRAY_ELEMENT, "array-element", 1)                               \
  X(SG_ARRAY_SPEC, "array-spec", 1)                                     \
  X(SG_ASSIGNMENT_STMT, "assignment-stmt", 5)                           \
  X(SG_ASSOCIATE_STMT, "associate-stmt", 5)                             \
  X(SG_ASSOCIATION, "association", 1)                                   \
  X(SG_ASSOCIATION_LIST, "association-list", 1)                         \
  X(SG_ASSUMED_IMPLIED_SPEC, "assumed-implied-spec", 1)                 \
  X(SG_ASSUMED_IMPLIED_SPEC_LIST, "assumed-implied-spec-list", 1)       \
  X(SG_ASSUMED_RANK_SPEC, "assumed-rank-spec", 1)                       \
  X(SG_ASSUMED_SHAPE_SPEC, "assumed-shape-spec", 1)                     \
  X(SG_ASSUMED_SHAPE_SPEC_LIST, "assumed-shape-spec-list", 1)           \
  X(SG_ASSUMED_SIZE_SPEC, "assumed-size-spec", 1)                       \
  X(SG_ASYNCHRONOUS_STMT, "asynchronous-stmt", 5)                       \
  X(SG_ATTR_SPEC, "attr-spec", 1)                                       \
  X(SG_BACKSPACE_STMT, "backspace-stmt", 5)                             \
  X(SG_BINDING_ATTR, "binding-attr", 1)                                 \
  X(SG_BINDING_ATTR_LIST, "binding-attr-list", 1)                       \
  X(SG_BINDING_NAME_LIST, "binding-name-list", 1)                       \
  X(SG_BINDING_PRIVATE_STMT, "binding-private-stmt", 5)                 \
  X(SG_BIND_ENTITY, "bind-entity", 1)                                   \
  X(SG_BIND_STMT, "bind-stmt", 5)                                       \
  X(SG_BLOCK_STMT, "block-stmt", 5)                                     \
  X(SG_BOUNDS_REMAPPING, "bounds-remapping", 1)                         \
  X(SG_BOUNDS_REMAPPING_LIST, "bounds-remapping-list", 1)               \
  X(SG_BOUNDS_SPEC, "bounds-spec", 1)                                   \
  X(SG_BOUNDS_SPEC_LIST, "bounds-spec-list", 1)                         \
  X(SG_CALL_STMT, "call-stmt", 5)                                       \
  X(SG_CASE_EXPR, "case-expr", 1)                                       \
  X(SG_CASE_SELECTOR, "case-selector", 1)                               \
  X(SG_CASE_STMT, "case-stmt", 5)                                       \
  X(SG_CASE_VALUE_RANGE, "case-value-range", 1)                         \
  X(SG_CASE_VALUE_RANGE_LIST, "case-value-range-list", 1)               \
  X(SG_CHAR_LENGTH, "char-length", 1)                                   \
  X(SG_CHAR_LITERAL_CONSTANT, "char-literal-constant", 2)               \
  X(SG_CHAR_SELECTOR, "char-selector", 2)                               \
  X(SG_CLOSE_STMT, "close-stmt", 5)                                     \
  X(SG_COARRAY_SPEC, "coarray-spec", 1)                                 \
  X(SG_CODIMENSION_DECL, "codimension-decl", 1)                         \
  X(SG_CODIMENSION_STMT, "codimension-stmt", 5)                         \
  X(SG_COINDEXED_NAMED_OBJECT, "coindexed-named-object", 1)             \
  X(SG_COMMON_BLOCK_OBJECT, "common-block-object", 1)                   \
  X(SG_COMMON_BLOCK_OBJECT_LIST, "common-block-object-list", 1)         \
  X(SG_COMMON_STMT, "common-stmt", 5)                                   \
  X(SG_COMPONENT_ARRAY_SPEC, "component-array-spec", 1)                 \
  X(SG_COMPONENT_ATTR_SPEC, "component-attr-spec", 1)                   \
  X(SG_COMPONENT_ATTR_SPEC_LIST, "component-attr-spec-list", 1)         \
  X(SG_COMPONENT_DATA_SOURCE, "component-data-source", 1)               \
  X(SG_COMPONENT_DECL, "component-decl", 1)                             \
  X(SG_COMPONENT_DECL_LIST, "component-decl-list", 1)                   \
  X(SG_COMPONENT_DEF_STMT, "component-def-stmt", 5)                     \
  X(SG_COMPONENT_INITIALIZATION, "component-initialization", 2)         \
  X(SG_COMPONENT_SPEC, "component-spec", 1)                             \
  X(SG_COMPONENT_SPEC_LIST, "component-spec-list", 1)                   \
  X(SG_COMPUTED_GOTO_STMT, "computed-goto-stmt", 5)                     \
  X(SG_CONCURRENT_CONTROL, "concurrent-control", 1)                     \
  X(SG_CONCURRENT_CONTROL_LIST, "concurrent-control-list", 1)           \
  X(SG_CONCURRENT_HEADER, "concurrent-header", 1)                       \
  X(SG_CONCURRENT_LIMIT, "concurrent-limit", 1)                         \
  X(SG_CONCURRENT_LOCALITY, "concurrent-locality", 1)                   \
  X(SG_CONCURRENT_STEP, "concurrent-step", 1)                           \
  X(SG_CONTAINS_STMT, "contains-stmt", 5)                               \
  X(SG_CONTINUE_STMT, "continue-stmt", 5)                               \
  X(SG_COSUBSCRIPT, "cosubscript", 1)                                   \
  X(SG_COSUBSCRIPT_LIST, "cosubscript-list", 1)                         \
  X(SG_CYCLE_STMT, "cycle-stmt", 5)                                     \
  X(SG_DATA_COMPONENT_DEF_STMT, "data-component-def-stmt", 5)           \
  X(SG_DATA_IMPLIED_DO, "data-implied-do", 2)                           \
  X(SG_DATA_POINTER_COMPONENT_NAME, "data-pointer-component-name", 1)   \
  X(SG_DATA_POINTER_OBJECT, "data-pointer-object", 1)                   \
  X(SG_DATA_REF, "data-ref", 1)                                         \
  X(SG_DATA_STMT, "data-stmt", 5)                                       \
  X(SG_DATA_STMT_CONSTANT, "data-stmt-constant", 1)                     \
  X(SG_DATA_STMT_OBJECT, "data-stmt-object", 1)                         \
  X(SG_DATA_STMT_OBJECT_LIST, "data-stmt-object-list", 1)               \
  X(SG_DATA_STMT_REPEAT, "data-stmt-repeat", 1)                         \
  X(SG_DATA_STMT_SET, "data-stmt-set", 1)                               \
  X(SG_DATA_STMT_SET_LIST, "data-stmt-set-list", 1)                     \
  X(SG_DATA_STMT_VALUE, "data-stmt-value", 2)                           \
  X(SG_DATA_STMT_VALUE_LIST, "data-stmt-value-list", 1)                 \
  X(SG_DATA_TARGET, "data-target", 1)                                   \
  X(SG_DEALLOCATE_STMT, "deallocate-stmt", 5)                           \
  X(SG_DEALLOC_OPT, "dealloc-opt", 1)                                   \
  X(SG_DEALLOC_OPT_LIST, "dealloc-opt-list", 1)                         \
  X(SG_DECLARATION_TYPE_SPEC, "declaration-type-spec", 1)               \
  X(SG_DEFAULT_CHAR_EXPR, "default-char-expr", 2)                       \
  X(SG_DEFERRED_COSHAPE_SPEC, "deferred-coshape-spec", 1)               \
  X(SG_DEFERRED_COSHAPE_SPEC_LIST, "deferred-coshape-spec-list", 1)     \
  X(SG_DEFERRED_SHAPE_SPEC, "deferred-shape-spec", 1)                   \
  X(SG_DEFERRED_SHAPE_SPEC_LIST, "deferred-shape-spec-list", 1)         \
  X(SG_DEFINED_IO_GENERIC_SPEC, "defined-io-generic-spec", 1)           \
  X(SG_DEFINED_OPERATOR, "defined-operator", 1)                         \
  X(SG_DERIVED_TYPE_SPEC, "derived-type-spec", 1)                       \
  X(SG_DERIVED_TYPE_STMT, "derived-type-stmt", 5)                       \
  X(SG_DESIGNATOR, "designator", 1)                                     \
  X(SG_DIGIT_STRING, "digit-string", 1)                                 \
  X(SG_DIMENSION_STMT, "dimension-stmt", 5)                             \
  X(SG_DO_STMT, "do-stmt", 5)                                           \
  X(SG_DUMMY_ARG, "dummy-arg", 1)                                       \
  X(SG_DUMMY_ARG_LIST, "dummy-arg-list", 1)                             \
  X(SG_DUMMY_ARG_NAME_LIST, "dummy-arg-name-list", 1)                   \
  X(SG_ELSEWHERE_STMT, "elsewhere-stmt", 5)                             \
  X(SG_ELSE_IF_STMT, "else-if-stmt", 5)                                 \
  X(SG_ELSE_STMT, "else-stmt", 5)                                       \
  X(SG_ENDFILE_STMT, "endfile-stmt", 5)                                 \
  X(SG_END_ASSOCIATE_STMT, "end-associate-stmt", 5)                     \
  X(SG_END_BLOCK_STMT, "end-block-stmt", 5)                             \
  X(SG_END_DO, "end-do", 1)                                             \
  X(SG_END_DO_STMT, "end-do-stmt", 5)                                   \
  X(SG_END_ENUM_STMT, "end-enum-stmt", 5)                               \
  X(SG_END_FORALL_STMT, "end-forall-stmt", 5)                           \
  X(SG_END_FUNCTION_STMT, "end-function-stmt", 5)                       \
  X(SG_END_IF_STMT, "end-if-stmt", 5)                                   \
  X(SG_END_INTERFACE_STMT, "end-interface-stmt", 5)                     \
  X(SG_END_MODULE_STMT, "end-module-stmt", 5)                           \
  X(SG_END_MP_SUBPROGRAM_STMT, "end-mp-subprogram-stmt", 5)             \
  X(SG_END_PROGRAM_STMT, "end-program-stmt", 5)                         \
  X(SG_END_SELECT_RANK_STMT, "end-select-rank-stmt", 5)                 \
  X(SG_END_SELECT_STMT, "end-select-stmt", 5)                           \
  X(SG_END_SELECT_TYPE_STMT, "end-select-type-stmt", 5)                 \
  X(SG_END_SUBMODULE_STMT, "end-submodule-stmt", 5)                     \
  X(SG_END_SUBROUTINE_STMT, "end-subroutine-stmt", 5)                   \
  X(SG_END_TYPE_STMT, "end-type-stmt", 5)                               \
  X(SG_END_WHERE_STMT, "end-where-stmt", 5)                             \
  X(SG_ENTITY_DECL, "entity-decl", 1)                                   \
  X(SG_ENTITY_DECL_LIST, "entity-decl-list", 1)                         \
  X(SG_ENTRY_STMT, "entry-stmt", 5)                                     \
  X(SG_ENUMERATOR, "enumerator", 1)                                     \
  X(SG_ENUMERATOR_DEF_STMT, "enumerator-def-stmt", 5)                   \
  X(SG_ENUMERATOR_LIST, "enumerator-list", 1)                           \
  X(SG_ENUM_DEF_STMT, "enum-def-stmt", 5)                               \
  X(SG_EQUIVALENCE_OBJECT, "equivalence-object", 1)                     \
  X(SG_EQUIVALENCE_OBJECT_LIST, "equivalence-object-list", 1)           \
  X(SG_EQUIVALENCE_SET, "equivalence-set", 1)                           \
  X(SG_EQUIVALENCE_SET_LIST, "equivalence-set-list", 1)                 \
  X(SG_EQUIVALENCE_STMT, "equivalence-stmt", 5)                         \
  X(SG_EQUIV_OP, "equiv-op", 1)                                         \
  X(SG_ERROR_STOP_STMT, "error-stop-stmt", 5)                           \
  X(SG_EVENT_POST_STMT, "event-post-stmt", 5)                           \
  X(SG_EVENT_WAIT_STMT, "event-wait-stmt", 5)                           \
  X(SG_EXIT_STMT, "exit-stmt", 5)                                       \
  X(SG_EXPLICIT_COSHAPE_SPEC, "explicit-coshape-spec", 1)               \
  X(SG_EXPLICIT_SHAPE_SPEC, "explicit-shape-spec", 1)                   \
  X(SG_EXPLICIT_SHAPE_SPEC_LIST, "explicit-shape-spec-list", 1)         \
  X(SG_EXPONENT, "exponent", 1)                                         \
  X(SG_EXPONENT_LETTER, "exponent-letter", 1)                           \
  X(SG_EXPR, "expr", 2)                                                 \
  X(SG_EXTENDED_INTRINSIC_OP, "extended-intrinsic-op", 1)               \
  X(SG_EXTERNAL_NAME_LIST, "external-name-list", 1)                     \
  X(SG_EXTERNAL_STMT, "external-stmt", 5)                               \
  X(SG_FAIL_IMAGE_STMT, "fail-image-stmt", 5)                           \
  X(SG_FINAL_PROCEDURE_STMT, "final-procedure-stmt", 5)                 \
  X(SG_FINAL_SUBROUTINE_NAME_LIST, "final-subroutine-name-list", 1)     \
  X(SG_FLUSH_STMT, "flush-stmt", 5)                                     \
  X(SG_FORALL_ASSIGNMENT_STMT, "forall-assignment-stmt", 5)             \
  X(SG_FORALL_CONSTRUCT_STMT, "forall-construct-stmt", 5)               \
  X(SG_FORALL_STMT, "forall-stmt", 5)                                   \
  X(SG_FORMAT, "format", 1)                                             \
  X(SG_FORMAT_SPECIFICATION, "format-specification", 2)                 \
  X(SG_FORMAT_STMT, "format-stmt", 5)                                   \
  X(SG_FORM_TEAM_STMT, "form-team-stmt", 5)                             \
  X(SG_FUNCTION_REFERENCE, "function-reference", 1)                     \
  X(SG_FUNCTION_STMT, "function-stmt", 5)                               \
  X(SG_GENERIC_SPEC, "generic-spec", 1)                                 \
  X(SG_GENERIC_STMT, "generic-stmt", 5)                                 \
  X(SG_GOTO_STMT, "goto-stmt", 5)                                       \
  X(SG_IF_STMT, "if-stmt", 5)                                           \
  X(SG_IF_THEN_STMT, "if-then-stmt", 5)                                 \
  X(SG_IMAGE_SELECTOR, "image-selector", 1)                             \
  X(SG_IMAGE_SELECTOR_SPEC, "image-selector-spec", 1)                   \
  X(SG_IMAGE_SELECTOR_SPEC_LIST, "image-selector-spec-list", 1)         \
  X(SG_IMPLICIT_NONE_SPEC, "implicit-none-spec", 1)                     \
  X(SG_IMPLICIT_NONE_SPEC_LIST, "implicit-none-spec-list", 1)           \
  X(SG_IMPLICIT_SPEC, "implicit-spec", 1)                               \
  X(SG_IMPLICIT_SPEC_LIST, "implicit-spec-list", 1)                     \
  X(SG_IMPLICIT_STMT, "implicit-stmt", 5)                               \
  X(SG_IMPLIED_SHAPE_OR_ASSUMED_SIZE_SPEC, "implied-shape-or-assumed-size-spec", 1) \
  X(SG_IMPLIED_SHAPE_SPEC, "implied-shape-spec", 1)                     \
  X(SG_IMPORT_NAME_LIST, "import-name-list", 1)                         \
  X(SG_IMPORT_STMT, "import-stmt", 5)                                   \
  X(SG_INITIALIZATION, "initialization", 2)                             \
  X(SG_INITIAL_DATA_TARGET, "initial-data-target", 1)                   \
  X(SG_INPUT_ITEM, "input-item", 1)                                     \
  X(SG_INPUT_ITEM_LIST, "input-item-list", 1)                           \
  X(SG_INQUIRE_STMT, "inquire-stmt", 5)                                 \
  X(SG_INTEGER_TYPE_SPEC, "integer-type-spec", 1)                       \
  X(SG_INTENT_SPEC, "intent-spec", 1)                                   \
  X(SG_INTENT_STMT, "intent-stmt", 5)                                   \
  X(SG_INTERFACE_STMT, "interface-stmt", 5)                             \
  X(SG_INTRINSIC_OPERATOR, "intrinsic-operator", 1)                     \
  X(SG_INTRINSIC_PROCEDURE_NAME_LIST, "intrinsic-procedure-name-list", 1) \
  X(SG_INTRINSIC_STMT, "intrinsic-stmt", 5)                             \
  X(SG_INTRINSIC_TYPE_SPEC, "intrinsic-type-spec", 1)                   \
  X(SG_INT_CONSTANT_EXPR, "int-constant-expr", 1)                       \
  X(SG_INT_EXPR, "int-expr", 1)                                         \
  X(SG_INT_LITERAL_CONSTANT, "int-literal-constant", 2)                 \
  X(SG_IO_CONTROL_SPEC_LIST, "io-control-spec-list", 1)                 \
  X(SG_IO_IMPLIED_DO, "io-implied-do", 1)                               \
  X(SG_IO_IMPLIED_DO_CONTROL, "io-implied-do-control", 1)               \
  X(SG_IO_IMPLIED_DO_OBJECT, "io-implied-do-object", 1)                 \
  X(SG_IO_IMPLIED_DO_OBJECT_LIST, "io_implied-do-object-list", 1)       \
  X(SG_KIND_PARAM, "kind-param", 1)                                     \
  X(SG_KIND_SELECTOR, "kind-selector", 1)                               \
  X(SG_LABEL, "label", 1)                                               \
  X(SG_LABEL_DO_STMT, "label-do-stmt", 5)                               \
  X(SG_LABEL_LIST, "label-list", 1)                                     \
  X(SG_LANGUAGE_BINDING_SPEC, "language-binding-spec", 1)               \
  X(SG_LENGTH_SELECTOR, "length-selector", 1)                           \
  X(SG_LETTER_SPEC, "letter-spec", 1)                                   \
  X(SG_LETTER_SPEC_LIST, "letter-spec-list", 1)                         \
  X(SG_LOCALITY_SPEC, "locality-spec", 1)                               \
  X(SG_LOCK_STMT, "lock-stmt", 5)                                       \
  X(SG_LOGICAL_EXPR, "logical-expr", 1)                                 \
  X(SG_LOGICAL_LITERAL_CONSTANT, "logical-literal-constant", 1)         \
  X(SG_LOOP_CONTROL, "loop-control", 1)                                 \
  X(SG_LOWER_BOUND_EXPR, "lower-bound-expr", 1)                         \
  X(SG_MACRO_STMT, "macro-stmt", 5)                                     \
  X(SG_MASKED_ELSEWHERE_STMT, "masked-elsewhere-stmt", 5)               \
  X(SG_MODULE_NATURE, "module-nature", 1)                               \
  X(SG_MODULE_STMT, "module-stmt", 5)                                   \
  X(SG_MP_SUBPROGRAM_STMT, "mp-subprogram-stmt", 5)                     \
  X(SG_MULT_OP, "mult-op", 1)                                           \
  X(SG_NAMED_CONSTANT_DEF, "named-constant-def", 1)                     \
  X(SG_NAMED_CONSTANT_DEF_LIST, "named-constant-def-list", 1)           \
  X(SG_NAMELIST_GROUP_OBJECT_LIST, "namelist-group-object-list", 1)     \
  X(SG_NAMELIST_STMT, "namelist-stmt", 5)                               \
  X(SG_NONLABEL_DO_STMT, "nonlabel-do-stmt", 5)                         \
  X(SG_NULLIFY_STMT, "nullify-stmt", 5)                                 \
  X(SG_NULL_INIT, "null-init", 1)                                       \
  X(SG_OBJECT_NAME_LIST, "object-name-list", 1)                         \
  X(SG_ONLY, "only", 1)                                                 \
  X(SG_ONLY_LIST, "only-list", 1)                                       \
  X(SG_OPEN_STMT, "open-stmt", 5)                                       \
  X(SG_OPTIONAL_STMT, "optional-stmt", 5)                               \
  X(SG_OTHER_SPECIFICATION_STMT, "other-specification-stmt", 5)         \
  X(SG_OUTPUT_ITEM, "output-item", 1)                                   \
  X(SG_OUTPUT_ITEM_LIST, "output-item-list", 1)                         \
  X(SG_PARAMETER_STMT, "parameter-stmt", 5)                             \
  X(SG_PARENT_STRING, "parent-string", 1)                               \
  X(SG_PART_REF, "part-ref", 1)                                         \
  X(SG_POINTER_ASSIGNMENT_STMT, "pointer-assignment-stmt", 5)           \
  X(SG_POINTER_DECL, "pointer-decl", 1)                                 \
  X(SG_POINTER_DECL_LIST, "pointer-decl-list", 1)                       \
  X(SG_POINTER_OBJECT, "pointer-object", 1)                             \
  X(SG_POINTER_OBJECT_LIST, "pointer-object-list", 1)                   \
  X(SG_POINTER_STMT, "pointer-stmt", 5)                                 \
  X(SG_PREFIX, "prefix", 1)                                             \
  X(SG_PREFIX_SPEC, "prefix-spec", 1)                                   \
  X(SG_PRINT_STMT, "print-stmt", 5)                                     \
  X(SG_PRIVATE_COMPONENTS_STMT, "private-components-stmt", 5)           \
  X(SG_PRIVATE_OR_SEQUENCE, "private-or-sequence", 1)                   \
  X(SG_PROCEDURE_DECLARATION_STMT, "procedure-declaration-stmt", 5)     \
  X(SG_PROCEDURE_DESIGNATOR, "procedure-designator", 1)                 \
  X(SG_PROCEDURE_STMT, "procedure-stmt", 5)                             \
  X(SG_PROC_ATTR_SPEC, "proc-attr-spec", 1)                             \
  X(SG_PROC_COMPONENT_ATTR_SPEC, "proc-component-attr-spec", 1)         \
  X(SG_PROC_COMPONENT_ATTR_SPEC_LIST, "proc-component-attr-spec-list", 1) \
  X(SG_PROC_COMPONENT_DEF_STMT, "proc-component-def-stmt", 5)           \
  X(SG_PROC_COMPONENT_REF, "proc-component-ref", 1)                     \
  X(SG_PROC_DECL, "proc-decl", 1)                                       \
  X(SG_PROC_DECL_LIST, "proc-decl-list", 1)                             \
  X(SG_PROC_INTERFACE, "proc-interface", 1)                             \
  X(SG_PROC_LANGUAGE_BINDING_SPEC, "proc-language-binding-spec", 1)     \
  X(SG_PROC_POINTER_INIT, "proc-pointer-init", 1)                       \
  X(SG_PROC_POINTER_NAME, "proc-pointer-name", 1)                       \
  X(SG_PROC_POINTER_OBJECT, "proc-pointer-object", 1)                   \
  X(SG_PROC_TARGET, "proc-target", 1)                                   \
  X(SG_PROGRAM_STMT, "program-stmt", 5)                                 \
  X(SG_PROTECTED_STMT, "protected-stmt", 5)                             \
  X(SG_READ_STMT, "read-stmt", 5)                                       \
  X(SG_REAL_LITERAL_CONSTANT, "real-literal-constant", 2)               \
  X(SG_REL_OP, "rel-op", 1)                                             \
  X(SG_RENAME, "rename", 1)                                             \
  X(SG_RENAME_LIST, "rename-list", 1)                                   \
  X(SG_RETURN_STMT, "return-stmt", 5)                                   \
  X(SG_REWIND_STMT, "rewind-stmt", 5)                                   \
  X(SG_SAVED_ENTITY, "saved-entity", 1)                                 \
  X(SG_SAVED_ENTITY_LIST, "saved-entity-list", 1)                       \
  X(SG_SAVE_STMT, "save-stmt", 5)                                       \
  X(SG_SECTION_SUBSCRIPT, "section-subscript", 1)                       \
  X(SG_SECTION_SUBSCRIPT_LIST, "section-subscript-list", 1)             \
  X(SG_SELECTOR, "selector", 1)                                         \
  X(SG_SELECT_CASE_STMT, "select-case-stmt", 5)                         \
  X(SG_SELECT_RANK_CASE_STMT, "select-rank-case-stmt", 5)               \
  X(SG_SELECT_RANK_STMT, "select-rank-stmt", 5)                         \
  X(SG_SELECT_TYPE_STMT, "select-type-stmt", 5)                         \
  X(SG_SEQUENCE_STMT, "sequence-stmt", 5)                               \
  X(SG_SIGN, "sign", 1)                                                 \
  X(SG_SIGNED_REAL_LITERAL_CONSTANT, "signed-real-literal-constant", 1) \
  X(SG_SIGNIFICAND, "significand", 1)                                   \
  X(SG_SPECIFIC_PROCEDURE, "specific-procedure", 1)                     \
  X(SG_SPECIFIC_PROCEDURE_LIST, "specific-procedure-list", 1)           \
  X(SG_STOP_STMT, "stop-stmt", 5)                                       \
  X(SG_STRUCTURE_COMPONENT, "structure-component", 1)                   \
  X(SG_STRUCTURE_CONSTRUCTOR, "structure-constructor", 1)               \
  X(SG_SUBMODULE_STMT, "submodule-stmt", 5)                             \
  X(SG_SUBROUTINE_STMT, "subroutine-stmt", 5)                           \
  X(SG_SUBSTRING, "substring", 1)                                       \
  X(SG_SUBSTRING_RANGE, "substring-range", 1)                           \
  X(SG_SUFFIX, "suffix", 1)                                             \
  X(SG_SYNC_ALL_STMT, "sync-all-stmt", 5)                               \
  X(SG_SYNC_IMAGES_STMT, "sync-images-stmt", 5)                         \
  X(SG_SYNC_MEMORY_STMT, "sync-memory-stmt", 5)                         \
  X(SG_SYNC_STAT, "sync-stat", 1)                                       \
  X(SG_SYNC_TEAM_STMT, "sync-team-stmt", 5)                             \
  X(SG_TARGET_DECL, "target-decl", 1)                                   \
  X(SG_TARGET_DECL_LIST, "target-decl-list", 1)                         \
  X(SG_TARGET_STMT, "target-stmt", 5)                                   \
  X(SG_TYPE_ATTR_SPEC, "type-attr-spec", 1)                             \
  X(SG_TYPE_ATTR_SPEC_LIST, "type-attr-spec-list", 1)                   \
  X(SG_TYPE_BOUND_GENERIC_STMT, "type-bound-generic-stmt", 5)           \
  X(SG_TYPE_BOUND_PROCEDURE_STMT, "type-bound-procedure-stmt", 5)       \
  X(SG_TYPE_BOUND_PROC_BINDING, "type-bound-proc-binding", 1)           \
  X(SG_TYPE_BOUND_PROC_DECL, "type-bound-proc-decl", 1)                 \
  X(SG_TYPE_BOUND_PROC_DECL_LIST, "type-bound-proc-decl-list", 1)       \
  X(SG_TYPE_DECL_ATTR_SEQ, "type-decl-attr-seq", 1)                     \
  X(SG_TYPE_DECLARATION_STMT, "type-declaration-stmt", 5)               \
  X(SG_TYPE_GUARD_STMT, "type-guard-stmt", 5)                           \
  X(SG_TYPE_PARAM_ATTR_SPEC, "type-param-attr-spec", 1)                 \
  X(SG_TYPE_PARAM_DECL, "type-param-decl", 1)                           \
  X(SG_TYPE_PARAM_DECL_LIST, "type-param-decl-list", 1)                 \
  X(SG_TYPE_PARAM_DEF_STMT, "type-param-def-stmt", 5)                   \
  X(SG_TYPE_PARAM_NAME, "type-param-name", 1)                           \
  X(SG_TYPE_PARAM_NAME_LIST, "type-param-name-list", 1)                 \
  X(SG_TYPE_PARAM_SPEC, "type-param-spec", 1)                           \
  X(SG_TYPE_PARAM_SPEC_LIST, "type-param-spec-list", 1)                 \
  X(SG_TYPE_PARAM_VALUE, "type-param-value", 1)                         \
  X(SG_TYPE_SPEC, "type-spec", 1)                                       \
  X(SG_UNLOCK_STMT, "unlock-stmt", 5)                                   \
  X(SG_UPPER_BOUND_EXPR, "upper-bound-expr", 1)                         \
  X(SG_USE_STMT, "use-stmt", 5)                                         \
  X(SG_VALUE_STMT, "value-stmt", 5)                                     \
  X(SG_VARIABLE, "variable", 1)                                         \
  X(SG_VARIABLE_NAME, "variable-name", 1)                               \
  X(SG_VARIABLE_NAME_LIST, "variable-name-list", 1)                     \
  X(SG_VOLATILE_STMT, "volatile-stmt", 5)                               \
  X(SG_WAIT_SPEC, "wait-spec", 1)                                       \
  X(SG_WAIT_STMT, "wait-stmt", 5)                                       \
  X(SG_WHERE_CONSTRUCT_STMT, "where-construct-stmt", 5)                 \
  X(SG_WHERE_STMT, "where-stmt", 5)                                     \
  X(SG_WRITE_STMT, "write-stmt", 5)                                     \
  X(SG_ZZZ_UB, "<statment grammar enum upper bound>", 0)                \
  X(TK_000_LB, "<token grammar enum lower bound>", 0)                   \
  X(TK_AND_OP, ".AND.", 3)                                              \
  X(TK_ARROW, "=>", 3)                                                  \
  X(TK_ASTERISK, "*", 3)                                                \
  X(TK_BRACKETL, "[", 3)                                                \
  X(TK_BRACKETR, "]", 3)                                                \
  X(TK_COLON, ":", 3)                                                   \
  X(TK_COMMA, ",", 3)                                                   \
  X(TK_CONCAT, "//", 3)                                                 \
  X(TK_DBL_COLON, "::", 3)                                              \
  X(TK_DBL_DOT, "..", 3)                                                \
  X(TK_DEF_OP, "defined-operator", 3)                                   \
  X(TK_EQUAL, "=", 3)                                                   \
  X(TK_EQV_OP, ".EQV.", 3)                                              \
  X(TK_FALSE_CONSTANT, ".FALSE.", 3)                                    \
  X(TK_MINUS, "-", 3)                                                   \
  X(TK_NAME, "name", 3)                                                 \
  X(TK_NEQV_OP, ".NEQV.", 3)                                            \
  X(TK_NOT_OP, ".NOT.", 3)                                              \
  X(TK_OR_OP, ".OR.", 3)                                                \
  X(TK_PARENL, "(", 3)                                                  \
  X(TK_PARENR, ")", 3)                                                  \
  X(TK_PERCENT, "%", 3)                                                 \
  X(TK_PLUS, "+", 3)                                                    \
  X(TK_POWER_OP, "**", 3)                                               \
  X(TK_REL_EQ, "==", 3)                                                 \
  X(TK_REL_GE, ">=", 3)                                                 \
  X(TK_REL_GT, ">", 3)                                                  \
  X(TK_REL_LE, "<=", 3)                                                 \
  X(TK_REL_LT, "<", 3)                                                  \
  X(TK_REL_NE, "/=", 3)                                                 \
  X(TK_SEMICOLON, ";", 3)                                               \
  X(TK_SLASHF, "/", 3)                                                  \
  X(TK_TRUE_CONSTANT, ".TRUE.", 3)                                      \
  X(TK_UNDERSCORE, "_", 3)                                              \
  X(TK_VBAR, "|", 3)                                                    \
  X(TK_ZZZ_UB, "<token grammar enum upper bound>", 0)                   \
  X(CLIENT_EXTENSION, "<CLIENT EXTENSION>", 0)
// clang-format on

#endif
